CREATE OR REPLACE TABLE TRANSACTION_RAW 
(household_key	INT,
BASKET_ID	INT,
DAY	INT,
PRODUCT_ID	INT,
QUANTITY	INT,
SALES_VALUE	FLOAT,
STORE_ID	INT,
RETAIL_DISC	FLOAT,
TRANS_TIME	INT,
WEEK_NO	INT,
COUPON_DISC	INT,
COUPON_MATCH_DISC INT
-- FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
-- FOREIGN KEY (household_key) references demographic_RAW(household_key)
);

SELECT * FROM TRANSACTION_RAW;


-- To calculate minimum and maximum sales value across different bsaket
SELECT BASKET_ID,MAX(SALES_VALUE) AS MAXM_SALES, MIN(SALES_VALUE) AS MINM_SALES
FROM TRANSACTION_RAW
GROUP BY 1
ORDER BY 1;

SELECT BASKET_ID,SUM(SALES_VALUE) AS TOT_SALES_VALUE
FROM TRANSACTION_RAW
GROUP BY 1
HAVING TOT_SALES_VALUE > 300
ORDER BY 1
LIMIT 3;

SELECT BASKET_ID,MAX(SALES_VALUE) AS MAXM_SALES, MIN(SALES_VALUE) AS MINM_SALES,SUM(SALES_VALUE) AS TOT_SALES_VALUE,AVG(SALES_VALUE) AS AVG_SALES_VALUE
FROM TRANSACTION_RAW
GROUP BY 1
Having (TOT_SALES_VALUE > 0 OR AVG_SALES_VALUE > 0)
Order By 4 Desc;

-- Total household key
SELECT count(DISTINCT Household_key) From TRANSACTION_RAW;-- 2494

SELECT HOUSEHOLD_KEY,COUNT(DISTINCT BASKET_ID) AS TOT_BASKET,COUNT(BASKET_ID),SUM(QUANTITY) AS TOT_QUANTITY 
FROM TRANSACTION_RAW
GROUP BY 1;

SELECT HOUSEHOLD_KEY,count(distinct BASKET_ID) AS TOT_BASKET
FROM TRANSACTION_RAW
GROUP BY 1;

-- KEY KPI

create or replace table retail_kpi as
selct store_id,
count(distinct household_id) As TOT_HOUSEHOLDS,
count(DISTINCT BASKET_ID) AS TOT_BASKET,
SUM(Quantity) AS TOT_QUANTITY,
MIN(SALES_VALUE) AS MINIMUM_SALES,
MAX(SALES_VALUE) AS MAXM_SALES,
SUM(SALES_VALUE) AS TOT_SALES_VALUE,
ROUND(AVG(SALES_VALUE),2) AS AVG_SALES_VALUE,
CASE
    WHEN TOT_SALES_VALUE > 0 and TOT_SALES_VALUE < 5000 THEN ' 0-5K'
    WHEN TOT_SALES_VALUE >= 5000 and TOT_SALES_VALUE < 10000 THEN ' 5-10K'
    WHEN TOT_SALES_VALUE >= 10000 and TOT_SALES_VALUE < 15000 THEN ' 10-15K'
    WHEN TOT_SALES_VALUE >= 15000 and TOT_SALES_VALUE < 20000 THEN ' 15-20K'
    WHEN TOT_SALES_VALUE >= 20000 and TOT_SALES_VALUE < 25000 THEN ' 20-25K'
    WHEN TOT_SALES_VALUE >= 25000 and TOT_SALES_VALUE < 30000 THEN ' 25-30K'
    WHEN TOT_SALES_VALUE >= 30000 and TOT_SALES_VALUE < 35000 THEN ' 30-35K'
    WHEN TOT_SALES_VALUE >= 35000 and TOT_SALES_VALUE < 40000 THEN ' 35-40K'
    WHEN TOT_SALES_VALUE >= 40000 and TOT_SALES_VALUE < 45000 THEN ' 40-45K'
    WHEN TOT_SALES_VALUE >= 45000 and TOT_SALES_VALUE < 50000 THEN ' 45-50K'
END ;


-- Get CURRENT DATE
SELECT CURRENT_DATE;

-- GET CURRENT TIME AND DATE
SELECT CURRENT_TIMESTAMP;

-- GET CURRENT TIME
SELECT CURRENT_TIME;

-- 
SELECT CONVERT_TIMEZONE('UTC',CURRENT_TIMESTAMP);

SELECT CURRENT_TIMESTAMP,
    YEAR(CURRENT_TIMESTAMP),
    MONTH(CURRENT_TIMESTAMP),
    WEEK(CURRENT_TIMESTAMP),
    DAY(CURRENT_TIMESTAMP),
    TIME(CURRENT_TIMESTAMP),
    QUARTER(CURRENT_TIMESTAMP),
    DATE(CURRENT_TIMESTAMP);

SELECT DATE_TRUNC('YEAR',CURRENT_DATE),
       DATE_TRUNC